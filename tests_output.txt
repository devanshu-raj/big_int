

Constructor Test :

big_int() = 0
default_constructor = 0
int_pos = 1234
int_neg = -1234
long_long_pos = 999999999999
long_long_neg = -999999999999
str_pos1 = 12345
str_neg1 = -12345
str_pos2 = 12345
str_neg2 = -12345


Addition Test :

6 + 4 = 10
-6 + 4 = -2
-4 + 6 = 2
6 + (-4) = 2
4 + (-6) = -2
(-6) + (-4) = -10
19 + 0 = 19
0 + 19 = 19
(-19) + 0 = -19
0 + (-19) = -19

x = 888888888888888888888888888888888888888888888888888888888
y = 111111111111111111111111111111111111111111111111112222222
x + y = 1000000000000000000000000000000000000000000000000001111110

x = -888888888888888888888888888888888888888888888888888888888
y = 111111111111111111111111111111111111111111111111112222222
x + y = -777777777777777777777777777777777777777777777777776666666

x = 888888888888888888888888888888888888888888888888888888888
y = -111111111111111111111111111111111111111111111111122222222
x + y = 777777777777777777777777777777777777777777777777766666666

x = -888888888888888888888888888888888888888888888888888888888
y = -111111111111111111111111111111111111111111111111122222222
x + y = -1000000000000000000000000000000000000000000000000011111110


Subtraction Test :

6 - 4 = 2
4 - 6 = -2
-6 - 4 = -10
-4 - 6 = -10
6 - (-4) = 10
4 - (-6) = 10
(-6) - (-4) = -2
(-4) - (-6) = 2
19 - 0 = 19
(-19) - 0 = -19
0 - 19 = -19
0 - (-19) = 19

x = 888888888888888888888888888888888888888888888888888880000
y = 111111111111111111111111111111111111111111111111112222222
x - y = 777777777777777777777777777777777777777777777777776657778

x = -888888888888888888888888888888888888888888888888888880000
y = 111111111111111111111111111111111111111111111111112222222
x - y = -1000000000000000000000000000000000000000000000000001102222

x = 888888888888888888888888888888888888888888888888888880000
y = -111111111111111111111111111111111111111111111111122222222
x - y = 1000000000000000000000000000000000000000000000000011102222

x = -888888888888888888888888888888888888888888888888888880000
y = -111111111111111111111111111111111111111111111111122222222
x - y = -777777777777777777777777777777777777777777777777766657778


Multiplication Test :

(6) * (4) = 24
(-6) * (4) = -24
(6) * (-4) = -24
(-6) * (-4) = 24
19 * 0 = 0
(-19) * 0 = 0

x = 888888888888888888888888888888888888888888888888888880000
y = 111111111111111111111111111111111111111111111111112222222
x * y = 98765432098765432098765432098765432098765432098766418765234567901234567901234567901234567901234567901224691360000

x = -888888888888888888889999999999999999999999999999999999999
y = 11116666666667777777777788888888888888889999999999999
x * y = -9881481481482469135814830864197532098766419765432097876532094444444443332222222211111111111111110000000000001


Division Test :

9 / 4 = 2
4 / 9 = 0
(-9) / 4 = -2
(-4) / 9 = 0
9 / (-4) = -2
4 / (-9) = 0
(-9) / (-4) = 2
(-4) / (-9) = 0
0 / 19 = 0
0 / (-19) = 0

x = 888888888888888888888888888888888888888888888888888880000
y = 111111111111111111111111111111111111111111111111112222222
x / y = 7

x = 888888888888888888888888888888888888888888888888887877867567578880000
y = -11111111111111111111111111111111111111111111111112222222254543444
x / y = -79999


Modulo Test :

WARNING : This method does not work for large negative integers

9 % 4 = 1
(-4) % 9 = -4
9 % (-4) = 1
(-4) % (-9) = -4
(-7866876) % 8698 = -3884
0 % 19 = 0
0 % (-19) = 0

x = 888888888888888888888888888888888888888888888888888880000
y = 111111111111111111111111111111111111111111111111112222222
x % y = 111111111111111111111111111111111111111111111111103324446


Assignment Operator Test :

a = 2
b = 3
c = 123456789
after a += b, a = 5
after a -= b, a = 2
after c *= a, c = 246913578
after c /= b, c = 82304526
after c %= b, c = 0


Unary Operator Test :

initial value, a = 0
a++ = 0
a = 1
++a = 2
++(++a) = 4
a-- = 4
a = 3
--a = 2
--(--(--a)) = -1


Relational Operator Test :

a = 9999999999999999999999999999998888
b = 9999999999999999999999999999998888
c = -9999999999999999999999999999988888
(a == b) => true
(b == c) => false
(a == c) => false
(a > b) => false
(b > c) => true
(a > c) => true
(a < b) => false
(b < c) => false
(a < c) => false
(a >= b) => true
(b >= c) => true
(a >= c) => true
(a <= b) => true
(b <= c) => false
(a <= c) => false
(a != b) => false
(b != c) => true
(a != c) => true


Utility Test :

n = 0
n.is_zero() = true
n = -9999999999999999999999999999999999999999999
n.absolute() = 9999999999999999999999999999999999999999999
n.digit_count() = 43
n.fits_in_ll() = false
n.multipy_10(5) = -999999999999999999999999999999999999999999900000
n.divide_10(30) = -9999999999999
n.fits_in_ll() = true
